items:
- uid: OpenGraph_Net.OpenGraph
  commentId: T:OpenGraph_Net.OpenGraph
  id: OpenGraph
  parent: OpenGraph_Net
  children:
  - OpenGraph_Net.OpenGraph.Add(System.Collections.Generic.KeyValuePair{System.String,System.String})
  - OpenGraph_Net.OpenGraph.Add(System.String,System.String)
  - OpenGraph_Net.OpenGraph.Clear
  - OpenGraph_Net.OpenGraph.Contains(System.Collections.Generic.KeyValuePair{System.String,System.String})
  - OpenGraph_Net.OpenGraph.ContainsKey(System.String)
  - OpenGraph_Net.OpenGraph.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.Int32)
  - OpenGraph_Net.OpenGraph.Count
  - OpenGraph_Net.OpenGraph.GetEnumerator
  - OpenGraph_Net.OpenGraph.Image
  - OpenGraph_Net.OpenGraph.IsReadOnly
  - OpenGraph_Net.OpenGraph.Item(System.String)
  - OpenGraph_Net.OpenGraph.Keys
  - OpenGraph_Net.OpenGraph.MakeGraph(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IList{System.String},System.String)
  - OpenGraph_Net.OpenGraph.OriginalUrl
  - OpenGraph_Net.OpenGraph.ParseHtml(System.String,System.Boolean)
  - OpenGraph_Net.OpenGraph.ParseUrl(System.String,System.String,System.Boolean)
  - OpenGraph_Net.OpenGraph.ParseUrl(System.Uri,System.String,System.Boolean)
  - OpenGraph_Net.OpenGraph.ParseUrlAsync(System.String,System.String,System.Boolean)
  - OpenGraph_Net.OpenGraph.ParseUrlAsync(System.Uri,System.String,System.Boolean)
  - OpenGraph_Net.OpenGraph.Remove(System.Collections.Generic.KeyValuePair{System.String,System.String})
  - OpenGraph_Net.OpenGraph.Remove(System.String)
  - OpenGraph_Net.OpenGraph.System#Collections#IEnumerable#GetEnumerator
  - OpenGraph_Net.OpenGraph.Title
  - OpenGraph_Net.OpenGraph.ToString
  - OpenGraph_Net.OpenGraph.TryGetValue(System.String,System.String@)
  - OpenGraph_Net.OpenGraph.Type
  - OpenGraph_Net.OpenGraph.Url
  - OpenGraph_Net.OpenGraph.Values
  langs:
  - csharp
  - vb
  name: OpenGraph
  fullName: OpenGraph_Net.OpenGraph
  type: Class
  source:
    remote:
      path: src/OpenGraph-Net/OpenGraph.cs
      branch: develop
      repo: git@github.com:ghorsey/OpenGraph-Net.git
    id: OpenGraph
    path: src/OpenGraph-Net/OpenGraph.cs
    startLine: 14
  assemblies:
  - OpenGraph-Net
  packages:
  - OpenGraph-Net(1.3.4)
  namespace: OpenGraph_Net
  summary: "\nRepresents Open Graph meta data parsed from HTML\n"
  example: []
  syntax:
    content: 'public class OpenGraph : IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable'
    content.vb: >-
      Public Class OpenGraph
          Implements IDictionary(Of String, String), ICollection(Of KeyValuePair(Of String, String)), IEnumerable(Of KeyValuePair(Of String, String)), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IDictionary{System.String,System.String}
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OpenGraph_Net.OpenGraph.Type
  commentId: P:OpenGraph_Net.OpenGraph.Type
  id: Type
  parent: OpenGraph_Net.OpenGraph
  langs:
  - csharp
  - vb
  name: Type
  fullName: OpenGraph_Net.OpenGraph.Type
  type: Property
  source:
    remote:
      path: src/OpenGraph-Net/OpenGraph.cs
      branch: develop
      repo: git@github.com:ghorsey/OpenGraph-Net.git
    id: Type
    path: src/OpenGraph-Net/OpenGraph.cs
    startLine: 35
  assemblies:
  - OpenGraph-Net
  packages:
  - OpenGraph-Net(1.3.4)
  namespace: OpenGraph_Net
  summary: "\nGets the type.\n"
  example: []
  syntax:
    content: public string Type { get; }
    content.vb: Public ReadOnly Property Type As String
    parameters: []
    return:
      type: System.String
      description: The type of open graph document.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OpenGraph_Net.OpenGraph.Title
  commentId: P:OpenGraph_Net.OpenGraph.Title
  id: Title
  parent: OpenGraph_Net.OpenGraph
  langs:
  - csharp
  - vb
  name: Title
  fullName: OpenGraph_Net.OpenGraph.Title
  type: Property
  source:
    remote:
      path: src/OpenGraph-Net/OpenGraph.cs
      branch: develop
      repo: git@github.com:ghorsey/OpenGraph-Net.git
    id: Title
    path: src/OpenGraph-Net/OpenGraph.cs
    startLine: 41
  assemblies:
  - OpenGraph-Net
  packages:
  - OpenGraph-Net(1.3.4)
  namespace: OpenGraph_Net
  summary: "\nGets the title of the open graph document.\n"
  example: []
  syntax:
    content: public string Title { get; }
    content.vb: Public ReadOnly Property Title As String
    parameters: []
    return:
      type: System.String
      description: The title.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OpenGraph_Net.OpenGraph.Image
  commentId: P:OpenGraph_Net.OpenGraph.Image
  id: Image
  parent: OpenGraph_Net.OpenGraph
  langs:
  - csharp
  - vb
  name: Image
  fullName: OpenGraph_Net.OpenGraph.Image
  type: Property
  source:
    remote:
      path: src/OpenGraph-Net/OpenGraph.cs
      branch: develop
      repo: git@github.com:ghorsey/OpenGraph-Net.git
    id: Image
    path: src/OpenGraph-Net/OpenGraph.cs
    startLine: 47
  assemblies:
  - OpenGraph-Net
  packages:
  - OpenGraph-Net(1.3.4)
  namespace: OpenGraph_Net
  summary: "\nGets the image for the open graph document.\n"
  example: []
  syntax:
    content: public Uri Image { get; }
    content.vb: Public ReadOnly Property Image As Uri
    parameters: []
    return:
      type: System.Uri
      description: The image.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OpenGraph_Net.OpenGraph.Url
  commentId: P:OpenGraph_Net.OpenGraph.Url
  id: Url
  parent: OpenGraph_Net.OpenGraph
  langs:
  - csharp
  - vb
  name: Url
  fullName: OpenGraph_Net.OpenGraph.Url
  type: Property
  source:
    remote:
      path: src/OpenGraph-Net/OpenGraph.cs
      branch: develop
      repo: git@github.com:ghorsey/OpenGraph-Net.git
    id: Url
    path: src/OpenGraph-Net/OpenGraph.cs
    startLine: 53
  assemblies:
  - OpenGraph-Net
  packages:
  - OpenGraph-Net(1.3.4)
  namespace: OpenGraph_Net
  summary: "\nGets the URL for the open graph document\n"
  example: []
  syntax:
    content: public Uri Url { get; }
    content.vb: Public ReadOnly Property Url As Uri
    parameters: []
    return:
      type: System.Uri
      description: The URL.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OpenGraph_Net.OpenGraph.OriginalUrl
  commentId: P:OpenGraph_Net.OpenGraph.OriginalUrl
  id: OriginalUrl
  parent: OpenGraph_Net.OpenGraph
  langs:
  - csharp
  - vb
  name: OriginalUrl
  fullName: OpenGraph_Net.OpenGraph.OriginalUrl
  type: Property
  source:
    remote:
      path: src/OpenGraph-Net/OpenGraph.cs
      branch: develop
      repo: git@github.com:ghorsey/OpenGraph-Net.git
    id: OriginalUrl
    path: src/OpenGraph-Net/OpenGraph.cs
    startLine: 59
  assemblies:
  - OpenGraph-Net
  packages:
  - OpenGraph-Net(1.3.4)
  namespace: OpenGraph_Net
  summary: "\nGets the original URL used to generate this graph\n"
  example: []
  syntax:
    content: public Uri OriginalUrl { get; }
    content.vb: Public ReadOnly Property OriginalUrl As Uri
    parameters: []
    return:
      type: System.Uri
      description: The original URL.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OpenGraph_Net.OpenGraph.MakeGraph(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IList{System.String},System.String)
  commentId: M:OpenGraph_Net.OpenGraph.MakeGraph(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IList{System.String},System.String)
  id: MakeGraph(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IList{System.String},System.String)
  parent: OpenGraph_Net.OpenGraph
  langs:
  - csharp
  - vb
  name: MakeGraph(String, String, String, String, String, String, String, String, String, IList<String>, String)
  fullName: OpenGraph_Net.OpenGraph.MakeGraph(System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.Collections.Generic.IList<System.String>, System.String)
  type: Method
  source:
    remote:
      path: src/OpenGraph-Net/OpenGraph.cs
      branch: develop
      repo: git@github.com:ghorsey/OpenGraph-Net.git
    id: MakeGraph
    path: src/OpenGraph-Net/OpenGraph.cs
    startLine: 85
  assemblies:
  - OpenGraph-Net
  packages:
  - OpenGraph-Net(1.3.4)
  namespace: OpenGraph_Net
  summary: "\nMakes the graph.\n"
  example: []
  syntax:
    content: public static OpenGraph MakeGraph(string title, string type, string image, string url, string description = "", string siteName = "", string audio = "", string video = "", string locale = "", IList<string> localeAlternate = null, string determiner = "")
    content.vb: Public Shared Function MakeGraph(title As String, type As String, image As String, url As String, description As String = "", siteName As String = "", audio As String = "", video As String = "", locale As String = "", localeAlternate As IList(Of String) = Nothing, determiner As String = "") As OpenGraph
    parameters:
    - id: title
      type: System.String
      description: The title.
    - id: type
      type: System.String
      description: The type.
    - id: image
      type: System.String
      description: The image.
    - id: url
      type: System.String
      description: The URL.
    - id: description
      type: System.String
      description: The description.
    - id: siteName
      type: System.String
      description: Name of the site.
    - id: audio
      type: System.String
      description: The audio.
    - id: video
      type: System.String
      description: The video.
    - id: locale
      type: System.String
      description: The locale.
    - id: localeAlternate
      type: System.Collections.Generic.IList{System.String}
      description: The locale alternate.
    - id: determiner
      type: System.String
      description: The determiner.
    return:
      type: OpenGraph_Net.OpenGraph
      description: <xref href="OpenGraph_Net.OpenGraph" data-throw-if-not-resolved="false"></xref>
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: OpenGraph_Net.OpenGraph.MakeGraph(System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.String, System.Collections.Generic.IList(Of System.String), System.String)
  name.vb: MakeGraph(String, String, String, String, String, String, String, String, String, IList(Of String), String)
- uid: OpenGraph_Net.OpenGraph.ToString
  commentId: M:OpenGraph_Net.OpenGraph.ToString
  id: ToString
  parent: OpenGraph_Net.OpenGraph
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: OpenGraph_Net.OpenGraph.ToString()
  type: Method
  source:
    remote:
      path: src/OpenGraph-Net/OpenGraph.cs
      branch: develop
      repo: git@github.com:ghorsey/OpenGraph-Net.git
    id: ToString
    path: src/OpenGraph-Net/OpenGraph.cs
    startLine: 155
  assemblies:
  - OpenGraph-Net
  packages:
  - OpenGraph-Net(1.3.4)
  namespace: OpenGraph_Net
  summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents this instance.\n"
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\nA <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents this instance.\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: OpenGraph_Net.OpenGraph.ParseUrl(System.String,System.String,System.Boolean)
  commentId: M:OpenGraph_Net.OpenGraph.ParseUrl(System.String,System.String,System.Boolean)
  id: ParseUrl(System.String,System.String,System.Boolean)
  parent: OpenGraph_Net.OpenGraph
  langs:
  - csharp
  - vb
  name: ParseUrl(String, String, Boolean)
  fullName: OpenGraph_Net.OpenGraph.ParseUrl(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/OpenGraph-Net/OpenGraph.cs
      branch: develop
      repo: git@github.com:ghorsey/OpenGraph-Net.git
    id: ParseUrl
    path: src/OpenGraph-Net/OpenGraph.cs
    startLine: 187
  assemblies:
  - OpenGraph-Net
  packages:
  - OpenGraph-Net(1.3.4)
  namespace: OpenGraph_Net
  summary: "\nDownloads the HTML of the specified URL and parses it for open graph content.\n"
  example: []
  syntax:
    content: public static OpenGraph ParseUrl(string url, string userAgent = "facebookexternalhit", bool validateSpecifiction = false)
    content.vb: Public Shared Function ParseUrl(url As String, userAgent As String = "facebookexternalhit", validateSpecifiction As Boolean = False) As OpenGraph
    parameters:
    - id: url
      type: System.String
      description: The URL to download the HTML from.
    - id: userAgent
      type: System.String
      description: The user agent to use when downloading content.  The default is <code>"facebookexternalhit"</code> which is required for some site (like amazon) to include open graph data.
    - id: validateSpecifiction
      type: System.Boolean
      description: if set to <code>true</code> <xref href="OpenGraph_Net.OpenGraph" data-throw-if-not-resolved="false"></xref> will validate against the specification.
    return:
      type: OpenGraph_Net.OpenGraph
      description: "\n<xref href=\"OpenGraph_Net.OpenGraph\" data-throw-if-not-resolved=\"false\"></xref>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: OpenGraph_Net.OpenGraph.ParseUrlAsync(System.String,System.String,System.Boolean)
  commentId: M:OpenGraph_Net.OpenGraph.ParseUrlAsync(System.String,System.String,System.Boolean)
  id: ParseUrlAsync(System.String,System.String,System.Boolean)
  parent: OpenGraph_Net.OpenGraph
  langs:
  - csharp
  - vb
  name: ParseUrlAsync(String, String, Boolean)
  fullName: OpenGraph_Net.OpenGraph.ParseUrlAsync(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/OpenGraph-Net/OpenGraph.cs
      branch: develop
      repo: git@github.com:ghorsey/OpenGraph-Net.git
    id: ParseUrlAsync
    path: src/OpenGraph-Net/OpenGraph.cs
    startLine: 201
  assemblies:
  - OpenGraph-Net
  packages:
  - OpenGraph-Net(1.3.4)
  namespace: OpenGraph_Net
  summary: "\nParses the URL asynchronous.\n"
  example: []
  syntax:
    content: public static Task<OpenGraph> ParseUrlAsync(string url, string userAgent = "facebookexternalhit", bool validateSpecifiction = false)
    content.vb: Public Shared Function ParseUrlAsync(url As String, userAgent As String = "facebookexternalhit", validateSpecifiction As Boolean = False) As Task(Of OpenGraph)
    parameters:
    - id: url
      type: System.String
      description: The URL.
    - id: userAgent
      type: System.String
      description: The user agent.
    - id: validateSpecifiction
      type: System.Boolean
      description: if set to <code>true</code> [validate specifiction].
    return:
      type: System.Threading.Tasks.Task{OpenGraph_Net.OpenGraph}
      description: <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: OpenGraph_Net.OpenGraph.ParseUrlAsync(System.Uri,System.String,System.Boolean)
  commentId: M:OpenGraph_Net.OpenGraph.ParseUrlAsync(System.Uri,System.String,System.Boolean)
  id: ParseUrlAsync(System.Uri,System.String,System.Boolean)
  parent: OpenGraph_Net.OpenGraph
  langs:
  - csharp
  - vb
  name: ParseUrlAsync(Uri, String, Boolean)
  fullName: OpenGraph_Net.OpenGraph.ParseUrlAsync(System.Uri, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/OpenGraph-Net/OpenGraph.cs
      branch: develop
      repo: git@github.com:ghorsey/OpenGraph-Net.git
    id: ParseUrlAsync
    path: src/OpenGraph-Net/OpenGraph.cs
    startLine: 214
  assemblies:
  - OpenGraph-Net
  packages:
  - OpenGraph-Net(1.3.4)
  namespace: OpenGraph_Net
  summary: "\nParses the URL asynchronous.\n"
  example: []
  syntax:
    content: public static Task<OpenGraph> ParseUrlAsync(Uri url, string userAgent = "facebookexternalhit", bool validateSpecification = false)
    content.vb: Public Shared Function ParseUrlAsync(url As Uri, userAgent As String = "facebookexternalhit", validateSpecification As Boolean = False) As Task(Of OpenGraph)
    parameters:
    - id: url
      type: System.Uri
      description: The URL.
    - id: userAgent
      type: System.String
      description: The user agent.
    - id: validateSpecification
      type: System.Boolean
      description: if set to <code>true</code> [validate specification].
    return:
      type: System.Threading.Tasks.Task{OpenGraph_Net.OpenGraph}
      description: <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: OpenGraph_Net.OpenGraph.ParseUrl(System.Uri,System.String,System.Boolean)
  commentId: M:OpenGraph_Net.OpenGraph.ParseUrl(System.Uri,System.String,System.Boolean)
  id: ParseUrl(System.Uri,System.String,System.Boolean)
  parent: OpenGraph_Net.OpenGraph
  langs:
  - csharp
  - vb
  name: ParseUrl(Uri, String, Boolean)
  fullName: OpenGraph_Net.OpenGraph.ParseUrl(System.Uri, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/OpenGraph-Net/OpenGraph.cs
      branch: develop
      repo: git@github.com:ghorsey/OpenGraph-Net.git
    id: ParseUrl
    path: src/OpenGraph-Net/OpenGraph.cs
    startLine: 231
  assemblies:
  - OpenGraph-Net
  packages:
  - OpenGraph-Net(1.3.4)
  namespace: OpenGraph_Net
  summary: "\nDownloads the HTML of the specified URL and parses it for open graph content.\n"
  example: []
  syntax:
    content: public static OpenGraph ParseUrl(Uri url, string userAgent = "facebookexternalhit", bool validateSpecification = false)
    content.vb: Public Shared Function ParseUrl(url As Uri, userAgent As String = "facebookexternalhit", validateSpecification As Boolean = False) As OpenGraph
    parameters:
    - id: url
      type: System.Uri
      description: The URL to download the HTML from.
    - id: userAgent
      type: System.String
      description: The user agent to use when downloading content.  The default is <code>"facebookexternalhit"</code> which is required for some site (like amazon) to include open graph data.
    - id: validateSpecification
      type: System.Boolean
      description: if set to <code>true</code> verify that the document meets the required attributes of the open graph specification.
    return:
      type: OpenGraph_Net.OpenGraph
      description: <xref href="OpenGraph_Net.OpenGraph" data-throw-if-not-resolved="false"></xref>
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: OpenGraph_Net.OpenGraph.ParseHtml(System.String,System.Boolean)
  commentId: M:OpenGraph_Net.OpenGraph.ParseHtml(System.String,System.Boolean)
  id: ParseHtml(System.String,System.Boolean)
  parent: OpenGraph_Net.OpenGraph
  langs:
  - csharp
  - vb
  name: ParseHtml(String, Boolean)
  fullName: OpenGraph_Net.OpenGraph.ParseHtml(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/OpenGraph-Net/OpenGraph.cs
      branch: develop
      repo: git@github.com:ghorsey/OpenGraph-Net.git
    id: ParseHtml
    path: src/OpenGraph-Net/OpenGraph.cs
    startLine: 247
  assemblies:
  - OpenGraph-Net
  packages:
  - OpenGraph-Net(1.3.4)
  namespace: OpenGraph_Net
  summary: "\nParses the HTML for open graph content.\n"
  example: []
  syntax:
    content: public static OpenGraph ParseHtml(string content, bool validateSpecification = false)
    content.vb: Public Shared Function ParseHtml(content As String, validateSpecification As Boolean = False) As OpenGraph
    parameters:
    - id: content
      type: System.String
      description: The HTML to parse.
    - id: validateSpecification
      type: System.Boolean
      description: if set to <code>true</code> verify that the document meets the required attributes of the open graph specification.
    return:
      type: OpenGraph_Net.OpenGraph
      description: <xref href="OpenGraph_Net.OpenGraph" data-throw-if-not-resolved="false"></xref>
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: OpenGraph_Net.OpenGraph.Add(System.String,System.String)
  commentId: M:OpenGraph_Net.OpenGraph.Add(System.String,System.String)
  id: Add(System.String,System.String)
  parent: OpenGraph_Net.OpenGraph
  langs:
  - csharp
  - vb
  name: Add(String, String)
  fullName: OpenGraph_Net.OpenGraph.Add(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/OpenGraph-Net/OpenGraph.cs
      branch: develop
      repo: git@github.com:ghorsey/OpenGraph-Net.git
    id: Add
    path: src/OpenGraph-Net/OpenGraph.cs
    startLine: 430
  assemblies:
  - OpenGraph-Net
  packages:
  - OpenGraph-Net(1.3.4)
  namespace: OpenGraph_Net
  summary: "\nAdds the specified key.\n"
  example: []
  syntax:
    content: public void Add(string key, string value)
    content.vb: Public Sub Add(key As String, value As String)
    parameters:
    - id: key
      type: System.String
      description: The key.
    - id: value
      type: System.String
      description: The value.
  exceptions:
  - type: OpenGraph_Net.ReadOnlyDictionaryException
    commentId: T:OpenGraph_Net.ReadOnlyDictionaryException
    description: Cannot change a read only dictionary
  implements:
  - System.Collections.Generic.IDictionary{System.String,System.String}.Add(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OpenGraph_Net.OpenGraph.ContainsKey(System.String)
  commentId: M:OpenGraph_Net.OpenGraph.ContainsKey(System.String)
  id: ContainsKey(System.String)
  parent: OpenGraph_Net.OpenGraph
  langs:
  - csharp
  - vb
  name: ContainsKey(String)
  fullName: OpenGraph_Net.OpenGraph.ContainsKey(System.String)
  type: Method
  source:
    remote:
      path: src/OpenGraph-Net/OpenGraph.cs
      branch: develop
      repo: git@github.com:ghorsey/OpenGraph-Net.git
    id: ContainsKey
    path: src/OpenGraph-Net/OpenGraph.cs
    startLine: 442
  assemblies:
  - OpenGraph-Net
  packages:
  - OpenGraph-Net(1.3.4)
  namespace: OpenGraph_Net
  summary: "\nDetermines whether the specified key contains key.\n"
  example: []
  syntax:
    content: public bool ContainsKey(string key)
    content.vb: Public Function ContainsKey(key As String) As Boolean
    parameters:
    - id: key
      type: System.String
      description: The key.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the specified key contains key; otherwise, <code>false</code>.\n"
  implements:
  - System.Collections.Generic.IDictionary{System.String,System.String}.ContainsKey(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OpenGraph_Net.OpenGraph.Keys
  commentId: P:OpenGraph_Net.OpenGraph.Keys
  id: Keys
  parent: OpenGraph_Net.OpenGraph
  langs:
  - csharp
  - vb
  name: Keys
  fullName: OpenGraph_Net.OpenGraph.Keys
  type: Property
  source:
    remote:
      path: src/OpenGraph-Net/OpenGraph.cs
      branch: develop
      repo: git@github.com:ghorsey/OpenGraph-Net.git
    id: Keys
    path: src/OpenGraph-Net/OpenGraph.cs
    startLine: 451
  assemblies:
  - OpenGraph-Net
  packages:
  - OpenGraph-Net(1.3.4)
  namespace: OpenGraph_Net
  summary: "\nGets an <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref> containing the keys of the <xref href=\"System.Collections.Generic.IDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ICollection<string> Keys { get; }
    content.vb: Public ReadOnly Property Keys As ICollection(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.String}
      description: An <xref href="System.Collections.Generic.ICollection`1" data-throw-if-not-resolved="false"></xref> containing the keys of the object that implements <xref href="System.Collections.Generic.IDictionary`2" data-throw-if-not-resolved="false"></xref>.
  implements:
  - System.Collections.Generic.IDictionary{System.String,System.String}.Keys
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OpenGraph_Net.OpenGraph.Remove(System.String)
  commentId: M:OpenGraph_Net.OpenGraph.Remove(System.String)
  id: Remove(System.String)
  parent: OpenGraph_Net.OpenGraph
  langs:
  - csharp
  - vb
  name: Remove(String)
  fullName: OpenGraph_Net.OpenGraph.Remove(System.String)
  type: Method
  source:
    remote:
      path: src/OpenGraph-Net/OpenGraph.cs
      branch: develop
      repo: git@github.com:ghorsey/OpenGraph-Net.git
    id: Remove
    path: src/OpenGraph-Net/OpenGraph.cs
    startLine: 459
  assemblies:
  - OpenGraph-Net
  packages:
  - OpenGraph-Net(1.3.4)
  namespace: OpenGraph_Net
  summary: "\nRemoves the specified key.\n"
  example: []
  syntax:
    content: public bool Remove(string key)
    content.vb: Public Function Remove(key As String) As Boolean
    parameters:
    - id: key
      type: System.String
      description: The key.
    return:
      type: System.Boolean
      description: <code>false</code>
  exceptions:
  - type: OpenGraph_Net.ReadOnlyDictionaryException
    commentId: T:OpenGraph_Net.ReadOnlyDictionaryException
    description: Cannot change a read only dictionary
  implements:
  - System.Collections.Generic.IDictionary{System.String,System.String}.Remove(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OpenGraph_Net.OpenGraph.TryGetValue(System.String,System.String@)
  commentId: M:OpenGraph_Net.OpenGraph.TryGetValue(System.String,System.String@)
  id: TryGetValue(System.String,System.String@)
  parent: OpenGraph_Net.OpenGraph
  langs:
  - csharp
  - vb
  name: TryGetValue(String, out String)
  fullName: OpenGraph_Net.OpenGraph.TryGetValue(System.String, out System.String)
  type: Method
  source:
    remote:
      path: src/OpenGraph-Net/OpenGraph.cs
      branch: develop
      repo: git@github.com:ghorsey/OpenGraph-Net.git
    id: TryGetValue
    path: src/OpenGraph-Net/OpenGraph.cs
    startLine: 470
  assemblies:
  - OpenGraph-Net
  packages:
  - OpenGraph-Net(1.3.4)
  namespace: OpenGraph_Net
  summary: "\nTries the get value.\n"
  example: []
  syntax:
    content: public bool TryGetValue(string key, out string value)
    content.vb: Public Function TryGetValue(key As String, ByRef value As String) As Boolean
    parameters:
    - id: key
      type: System.String
      description: The key.
    - id: value
      type: System.String
      description: The value.
    return:
      type: System.Boolean
      description: true if the value was successfully set; otherwise false
  implements:
  - System.Collections.Generic.IDictionary{System.String,System.String}.TryGetValue(System.String,System.String@)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OpenGraph_Net.OpenGraph.TryGetValue(System.String, ByRef System.String)
  name.vb: TryGetValue(String, ByRef String)
- uid: OpenGraph_Net.OpenGraph.Values
  commentId: P:OpenGraph_Net.OpenGraph.Values
  id: Values
  parent: OpenGraph_Net.OpenGraph
  langs:
  - csharp
  - vb
  name: Values
  fullName: OpenGraph_Net.OpenGraph.Values
  type: Property
  source:
    remote:
      path: src/OpenGraph-Net/OpenGraph.cs
      branch: develop
      repo: git@github.com:ghorsey/OpenGraph-Net.git
    id: Values
    path: src/OpenGraph-Net/OpenGraph.cs
    startLine: 479
  assemblies:
  - OpenGraph-Net
  packages:
  - OpenGraph-Net(1.3.4)
  namespace: OpenGraph_Net
  summary: "\nGets an <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref> containing the values in the <xref href=\"System.Collections.Generic.IDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ICollection<string> Values { get; }
    content.vb: Public ReadOnly Property Values As ICollection(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.String}
      description: An <xref href="System.Collections.Generic.ICollection`1" data-throw-if-not-resolved="false"></xref> containing the values in the object that implements <xref href="System.Collections.Generic.IDictionary`2" data-throw-if-not-resolved="false"></xref>.
  implements:
  - System.Collections.Generic.IDictionary{System.String,System.String}.Values
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OpenGraph_Net.OpenGraph.Item(System.String)
  commentId: P:OpenGraph_Net.OpenGraph.Item(System.String)
  id: Item(System.String)
  parent: OpenGraph_Net.OpenGraph
  langs:
  - csharp
  - vb
  name: Item[String]
  fullName: OpenGraph_Net.OpenGraph.Item[System.String]
  type: Property
  source:
    remote:
      path: src/OpenGraph-Net/OpenGraph.cs
      branch: develop
      repo: git@github.com:ghorsey/OpenGraph-Net.git
    id: this[]
    path: src/OpenGraph-Net/OpenGraph.cs
    startLine: 487
  assemblies:
  - OpenGraph-Net
  packages:
  - OpenGraph-Net(1.3.4)
  namespace: OpenGraph_Net
  summary: "\nGets or sets the element with the specified key.\n"
  example: []
  syntax:
    content: public string this[string key] { get; set; }
    content.vb: Public Property Item(key As String) As String
    parameters:
    - id: key
      type: System.String
      description: The key.
    return:
      type: System.String
      description: returns the open graph value at the specified key
  exceptions:
  - type: OpenGraph_Net.ReadOnlyDictionaryException
    commentId: T:OpenGraph_Net.ReadOnlyDictionaryException
    description: Cannot modify a read-only collection
  implements:
  - System.Collections.Generic.IDictionary{System.String,System.String}.Item(System.String)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: OpenGraph_Net.OpenGraph.Item(System.String)
  name.vb: Item(String)
- uid: OpenGraph_Net.OpenGraph.Add(System.Collections.Generic.KeyValuePair{System.String,System.String})
  commentId: M:OpenGraph_Net.OpenGraph.Add(System.Collections.Generic.KeyValuePair{System.String,System.String})
  id: Add(System.Collections.Generic.KeyValuePair{System.String,System.String})
  parent: OpenGraph_Net.OpenGraph
  langs:
  - csharp
  - vb
  name: Add(KeyValuePair<String, String>)
  fullName: OpenGraph_Net.OpenGraph.Add(System.Collections.Generic.KeyValuePair<System.String, System.String>)
  type: Method
  source:
    remote:
      path: src/OpenGraph-Net/OpenGraph.cs
      branch: develop
      repo: git@github.com:ghorsey/OpenGraph-Net.git
    id: Add
    path: src/OpenGraph-Net/OpenGraph.cs
    startLine: 514
  assemblies:
  - OpenGraph-Net
  packages:
  - OpenGraph-Net(1.3.4)
  namespace: OpenGraph_Net
  summary: "\nAdds the specified item.\n"
  example: []
  syntax:
    content: public void Add(KeyValuePair<string, string> item)
    content.vb: Public Sub Add(item As KeyValuePair(Of String, String))
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.String,System.String}
      description: The item.
  exceptions:
  - type: OpenGraph_Net.ReadOnlyDictionaryException
    commentId: T:OpenGraph_Net.ReadOnlyDictionaryException
    description: Cannot change a read only dictionary
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}}.Add(System.Collections.Generic.KeyValuePair{System.String,System.String})
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OpenGraph_Net.OpenGraph.Add(System.Collections.Generic.KeyValuePair(Of System.String, System.String))
  name.vb: Add(KeyValuePair(Of String, String))
- uid: OpenGraph_Net.OpenGraph.Clear
  commentId: M:OpenGraph_Net.OpenGraph.Clear
  id: Clear
  parent: OpenGraph_Net.OpenGraph
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: OpenGraph_Net.OpenGraph.Clear()
  type: Method
  source:
    remote:
      path: src/OpenGraph-Net/OpenGraph.cs
      branch: develop
      repo: git@github.com:ghorsey/OpenGraph-Net.git
    id: Clear
    path: src/OpenGraph-Net/OpenGraph.cs
    startLine: 523
  assemblies:
  - OpenGraph-Net
  packages:
  - OpenGraph-Net(1.3.4)
  namespace: OpenGraph_Net
  summary: "\nClears this instance.\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  exceptions:
  - type: OpenGraph_Net.ReadOnlyDictionaryException
    commentId: T:OpenGraph_Net.ReadOnlyDictionaryException
    description: Cannot change a read only dictionary
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}}.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OpenGraph_Net.OpenGraph.Contains(System.Collections.Generic.KeyValuePair{System.String,System.String})
  commentId: M:OpenGraph_Net.OpenGraph.Contains(System.Collections.Generic.KeyValuePair{System.String,System.String})
  id: Contains(System.Collections.Generic.KeyValuePair{System.String,System.String})
  parent: OpenGraph_Net.OpenGraph
  langs:
  - csharp
  - vb
  name: Contains(KeyValuePair<String, String>)
  fullName: OpenGraph_Net.OpenGraph.Contains(System.Collections.Generic.KeyValuePair<System.String, System.String>)
  type: Method
  source:
    remote:
      path: src/OpenGraph-Net/OpenGraph.cs
      branch: develop
      repo: git@github.com:ghorsey/OpenGraph-Net.git
    id: Contains
    path: src/OpenGraph-Net/OpenGraph.cs
    startLine: 535
  assemblies:
  - OpenGraph-Net
  packages:
  - OpenGraph-Net(1.3.4)
  namespace: OpenGraph_Net
  summary: "\nDetermines whether [contains] [the specified item].\n"
  example: []
  syntax:
    content: public bool Contains(KeyValuePair<string, string> item)
    content.vb: Public Function Contains(item As KeyValuePair(Of String, String)) As Boolean
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.String,System.String}
      description: The item.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if [contains] [the specified item]; otherwise, <code>false</code>.\n"
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}}.Contains(System.Collections.Generic.KeyValuePair{System.String,System.String})
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OpenGraph_Net.OpenGraph.Contains(System.Collections.Generic.KeyValuePair(Of System.String, System.String))
  name.vb: Contains(KeyValuePair(Of String, String))
- uid: OpenGraph_Net.OpenGraph.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.Int32)
  commentId: M:OpenGraph_Net.OpenGraph.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.Int32)
  id: CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.Int32)
  parent: OpenGraph_Net.OpenGraph
  langs:
  - csharp
  - vb
  name: CopyTo(KeyValuePair<String, String>[], Int32)
  fullName: OpenGraph_Net.OpenGraph.CopyTo(System.Collections.Generic.KeyValuePair<System.String, System.String>[], System.Int32)
  type: Method
  source:
    remote:
      path: src/OpenGraph-Net/OpenGraph.cs
      branch: develop
      repo: git@github.com:ghorsey/OpenGraph-Net.git
    id: CopyTo
    path: src/OpenGraph-Net/OpenGraph.cs
    startLine: 545
  assemblies:
  - OpenGraph-Net
  packages:
  - OpenGraph-Net(1.3.4)
  namespace: OpenGraph_Net
  summary: "\nCopies to.\n"
  example: []
  syntax:
    content: public void CopyTo(KeyValuePair<string, string>[] array, int arrayIndex)
    content.vb: Public Sub CopyTo(array As KeyValuePair(Of String, String)(), arrayIndex As Integer)
    parameters:
    - id: array
      type: System.Collections.Generic.KeyValuePair{System.String,System.String}[]
      description: The array.
    - id: arrayIndex
      type: System.Int32
      description: Index of the array.
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}}.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OpenGraph_Net.OpenGraph.CopyTo(System.Collections.Generic.KeyValuePair(Of System.String, System.String)(), System.Int32)
  name.vb: CopyTo(KeyValuePair(Of String, String)(), Int32)
- uid: OpenGraph_Net.OpenGraph.Count
  commentId: P:OpenGraph_Net.OpenGraph.Count
  id: Count
  parent: OpenGraph_Net.OpenGraph
  langs:
  - csharp
  - vb
  name: Count
  fullName: OpenGraph_Net.OpenGraph.Count
  type: Property
  source:
    remote:
      path: src/OpenGraph-Net/OpenGraph.cs
      branch: develop
      repo: git@github.com:ghorsey/OpenGraph-Net.git
    id: Count
    path: src/OpenGraph-Net/OpenGraph.cs
    startLine: 554
  assemblies:
  - OpenGraph-Net
  packages:
  - OpenGraph-Net(1.3.4)
  namespace: OpenGraph_Net
  summary: "\nGets the number of elements contained in the <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of elements contained in the <xref href="System.Collections.Generic.ICollection`1" data-throw-if-not-resolved="false"></xref>.
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}}.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OpenGraph_Net.OpenGraph.IsReadOnly
  commentId: P:OpenGraph_Net.OpenGraph.IsReadOnly
  id: IsReadOnly
  parent: OpenGraph_Net.OpenGraph
  langs:
  - csharp
  - vb
  name: IsReadOnly
  fullName: OpenGraph_Net.OpenGraph.IsReadOnly
  type: Property
  source:
    remote:
      path: src/OpenGraph-Net/OpenGraph.cs
      branch: develop
      repo: git@github.com:ghorsey/OpenGraph-Net.git
    id: IsReadOnly
    path: src/OpenGraph-Net/OpenGraph.cs
    startLine: 560
  assemblies:
  - OpenGraph-Net
  packages:
  - OpenGraph-Net(1.3.4)
  namespace: OpenGraph_Net
  summary: "\nGets a value indicating whether the <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref> is read-only.\n"
  example: []
  syntax:
    content: public bool IsReadOnly { get; }
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "true"
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}}.IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OpenGraph_Net.OpenGraph.Remove(System.Collections.Generic.KeyValuePair{System.String,System.String})
  commentId: M:OpenGraph_Net.OpenGraph.Remove(System.Collections.Generic.KeyValuePair{System.String,System.String})
  id: Remove(System.Collections.Generic.KeyValuePair{System.String,System.String})
  parent: OpenGraph_Net.OpenGraph
  langs:
  - csharp
  - vb
  name: Remove(KeyValuePair<String, String>)
  fullName: OpenGraph_Net.OpenGraph.Remove(System.Collections.Generic.KeyValuePair<System.String, System.String>)
  type: Method
  source:
    remote:
      path: src/OpenGraph-Net/OpenGraph.cs
      branch: develop
      repo: git@github.com:ghorsey/OpenGraph-Net.git
    id: Remove
    path: src/OpenGraph-Net/OpenGraph.cs
    startLine: 568
  assemblies:
  - OpenGraph-Net
  packages:
  - OpenGraph-Net(1.3.4)
  namespace: OpenGraph_Net
  summary: "\nRemoves the specified item.\n"
  example: []
  syntax:
    content: public bool Remove(KeyValuePair<string, string> item)
    content.vb: Public Function Remove(item As KeyValuePair(Of String, String)) As Boolean
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.String,System.String}
      description: The item.
    return:
      type: System.Boolean
      description: Returns false
  exceptions:
  - type: OpenGraph_Net.ReadOnlyDictionaryException
    commentId: T:OpenGraph_Net.ReadOnlyDictionaryException
    description: Cannot change a read only dictionary
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}}.Remove(System.Collections.Generic.KeyValuePair{System.String,System.String})
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OpenGraph_Net.OpenGraph.Remove(System.Collections.Generic.KeyValuePair(Of System.String, System.String))
  name.vb: Remove(KeyValuePair(Of String, String))
- uid: OpenGraph_Net.OpenGraph.GetEnumerator
  commentId: M:OpenGraph_Net.OpenGraph.GetEnumerator
  id: GetEnumerator
  parent: OpenGraph_Net.OpenGraph
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: OpenGraph_Net.OpenGraph.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/OpenGraph-Net/OpenGraph.cs
      branch: develop
      repo: git@github.com:ghorsey/OpenGraph-Net.git
    id: GetEnumerator
    path: src/OpenGraph-Net/OpenGraph.cs
    startLine: 581
  assemblies:
  - OpenGraph-Net
  packages:
  - OpenGraph-Net(1.3.4)
  namespace: OpenGraph_Net
  summary: "\nGets the enumerator.\n"
  example: []
  syntax:
    content: public IEnumerator<KeyValuePair<string, string>> GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator(Of KeyValuePair(Of String, String))
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.String}}
      description: The enumerator for the key value pairs
  implements:
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OpenGraph_Net.OpenGraph.System#Collections#IEnumerable#GetEnumerator
  commentId: M:OpenGraph_Net.OpenGraph.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: OpenGraph_Net.OpenGraph
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  fullName: OpenGraph_Net.OpenGraph.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/OpenGraph-Net/OpenGraph.cs
      branch: develop
      repo: git@github.com:ghorsey/OpenGraph-Net.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/OpenGraph-Net/OpenGraph.cs
    startLine: 596
  assemblies:
  - OpenGraph-Net
  packages:
  - OpenGraph-Net(1.3.4)
  namespace: OpenGraph_Net
  summary: "\nReturns an enumerator that iterates through a collection.\n"
  example: []
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\nAn <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object that can be used to iterate through the collection.\n"
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: OpenGraph_Net
  isExternal: false
  name: OpenGraph_Net
  fullName: OpenGraph_Net
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<KeyValuePair<String, String>>
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.String>>
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String))
  name.vb: ICollection(Of KeyValuePair(Of String, String))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<String, String>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.String>>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String))
  name.vb: IEnumerable(Of KeyValuePair(Of String, String))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IDictionary`2
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  fullname.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.String
  parent: System
  isExternal: true
  name: String
  fullName: System.String
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  fullName: System.Uri
- uid: OpenGraph_Net.OpenGraph
  parent: OpenGraph_Net
  isExternal: false
  name: OpenGraph
  fullName: OpenGraph_Net.OpenGraph
- uid: System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  fullname.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: true
  name: IList<T>
  fullName: System.Collections.Generic.IList<T>
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{OpenGraph_Net.OpenGraph}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<OpenGraph>
  fullName: System.Threading.Tasks.Task<OpenGraph_Net.OpenGraph>
  fullname.vb: System.Threading.Tasks.Task(Of OpenGraph_Net.OpenGraph)
  name.vb: Task(Of OpenGraph)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: OpenGraph_Net.OpenGraph
    name: OpenGraph
    fullName: OpenGraph_Net.OpenGraph
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: OpenGraph_Net.OpenGraph
    name: OpenGraph
    fullName: OpenGraph_Net.OpenGraph
  - name: )
    fullName: )
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Collections.Generic.IDictionary{System.String,System.String}.Add(System.String,System.String)
  parent: System.Collections.Generic.IDictionary{System.String,System.String}
  definition: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  name: Add(String, String)
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>.Add(System.String, System.String)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String).Add(System.String, System.String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    fullName: System.Collections.Generic.IDictionary<System.String, System.String>.Add
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    fullName: System.Collections.Generic.IDictionary(Of System.String, System.String).Add
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: OpenGraph_Net.ReadOnlyDictionaryException
  isExternal: false
  name: ReadOnlyDictionaryException
  fullName: OpenGraph_Net.ReadOnlyDictionaryException
- uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  parent: System.Collections.Generic.IDictionary`2
  isExternal: true
  name: Add(TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Add(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Add
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Add
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,System.String}.ContainsKey(System.String)
  parent: System.Collections.Generic.IDictionary{System.String,System.String}
  definition: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  name: ContainsKey(String)
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>.ContainsKey(System.String)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String).ContainsKey(System.String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    fullName: System.Collections.Generic.IDictionary<System.String, System.String>.ContainsKey
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    fullName: System.Collections.Generic.IDictionary(Of System.String, System.String).ContainsKey
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  parent: System.Collections.Generic.IDictionary`2
  isExternal: true
  name: ContainsKey(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).ContainsKey(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).ContainsKey
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,System.String}.Keys
  parent: System.Collections.Generic.IDictionary{System.String,System.String}
  definition: System.Collections.Generic.IDictionary`2.Keys
  name: Keys
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>.Keys
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String).Keys
- uid: System.Collections.Generic.ICollection{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<String>
  fullName: System.Collections.Generic.ICollection<System.String>
  fullname.vb: System.Collections.Generic.ICollection(Of System.String)
  name.vb: ICollection(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Keys
  parent: System.Collections.Generic.IDictionary`2
  isExternal: true
  name: Keys
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Keys
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Keys
- uid: System.Collections.Generic.IDictionary{System.String,System.String}.Remove(System.String)
  parent: System.Collections.Generic.IDictionary{System.String,System.String}
  definition: System.Collections.Generic.IDictionary`2.Remove(`0)
  name: Remove(String)
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>.Remove(System.String)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String).Remove(System.String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.IDictionary<System.String, System.String>.Remove
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.IDictionary(Of System.String, System.String).Remove
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Remove(`0)
  parent: System.Collections.Generic.IDictionary`2
  isExternal: true
  name: Remove(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Remove(TKey)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Remove(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Remove
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Remove
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,System.String}.TryGetValue(System.String,System.String@)
  parent: System.Collections.Generic.IDictionary{System.String,System.String}
  definition: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  name: TryGetValue(String, String)
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>.TryGetValue(System.String, System.String)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String).TryGetValue(System.String, System.String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    fullName: System.Collections.Generic.IDictionary<System.String, System.String>.TryGetValue
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    fullName: System.Collections.Generic.IDictionary(Of System.String, System.String).TryGetValue
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  parent: System.Collections.Generic.IDictionary`2
  isExternal: true
  name: TryGetValue(TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue(TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).TryGetValue
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,System.String}.Values
  parent: System.Collections.Generic.IDictionary{System.String,System.String}
  definition: System.Collections.Generic.IDictionary`2.Values
  name: Values
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>.Values
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String).Values
- uid: System.Collections.Generic.IDictionary`2.Values
  parent: System.Collections.Generic.IDictionary`2
  isExternal: true
  name: Values
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Values
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Values
- uid: System.Collections.Generic.IDictionary{System.String,System.String}.Item(System.String)
  parent: System.Collections.Generic.IDictionary{System.String,System.String}
  definition: System.Collections.Generic.IDictionary`2.Item(`0)
  name: Item[String]
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>.Item[System.String]
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String).Item(System.String)
  name.vb: Item(String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    fullName: System.Collections.Generic.IDictionary<System.String, System.String>.Item
    isExternal: true
  - name: '['
    fullName: '['
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    fullName: System.Collections.Generic.IDictionary(Of System.String, System.String).Item
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Item(`0)
  parent: System.Collections.Generic.IDictionary`2
  isExternal: true
  name: Item[TKey]
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Item[TKey]
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Item(TKey)
  name.vb: Item(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Item
    isExternal: true
  - name: '['
    fullName: '['
  - name: TKey
    fullName: TKey
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Item
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}}.Add(System.Collections.Generic.KeyValuePair{System.String,System.String})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(KeyValuePair<String, String>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.String>>.Add(System.Collections.Generic.KeyValuePair<System.String, System.String>)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String)).Add(System.Collections.Generic.KeyValuePair(Of System.String, System.String))
  name.vb: Add(KeyValuePair(Of String, String))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.String>>.Add
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String)).Add
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  name: KeyValuePair<String, String>
  fullName: System.Collections.Generic.KeyValuePair<System.String, System.String>
  fullname.vb: System.Collections.Generic.KeyValuePair(Of System.String, System.String)
  name.vb: KeyValuePair(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  parent: System.Collections.Generic.ICollection`1
  isExternal: true
  name: Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair`2
  parent: System.Collections.Generic
  isExternal: true
  name: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  fullname.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}}.Clear
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.String>>.Clear()
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String)).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.String>>.Clear
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String)).Clear
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  parent: System.Collections.Generic.ICollection`1
  isExternal: true
  name: Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  fullname.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}}.Contains(System.Collections.Generic.KeyValuePair{System.String,System.String})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(KeyValuePair<String, String>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.String>>.Contains(System.Collections.Generic.KeyValuePair<System.String, System.String>)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String)).Contains(System.Collections.Generic.KeyValuePair(Of System.String, System.String))
  name.vb: Contains(KeyValuePair(Of String, String))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.String>>.Contains
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String)).Contains
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  parent: System.Collections.Generic.ICollection`1
  isExternal: true
  name: Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}}.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.Int32)
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(KeyValuePair<String, String>[], Int32)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.String>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, System.String>[], System.Int32)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String)).CopyTo(System.Collections.Generic.KeyValuePair(Of System.String, System.String)(), System.Int32)
  name.vb: CopyTo(KeyValuePair(Of String, String)(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.String>>.CopyTo
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String)).CopyTo
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair{System.String,System.String}[]
  isExternal: true
  name: KeyValuePair<String, String>[]
  fullName: System.Collections.Generic.KeyValuePair<System.String, System.String>[]
  fullname.vb: System.Collections.Generic.KeyValuePair(Of System.String, System.String)()
  name.vb: KeyValuePair(Of String, String)()
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  - name: ()
    fullName: ()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.ICollection`1
  isExternal: true
  name: CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  fullname.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}}.Count
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.String>>.Count
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String)).Count
- uid: System.Collections.Generic.ICollection`1.Count
  parent: System.Collections.Generic.ICollection`1
  isExternal: true
  name: Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  fullname.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}}.IsReadOnly
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.String>>.IsReadOnly
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String)).IsReadOnly
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  parent: System.Collections.Generic.ICollection`1
  isExternal: true
  name: IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  fullname.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}}.Remove(System.Collections.Generic.KeyValuePair{System.String,System.String})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(KeyValuePair<String, String>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.String>>.Remove(System.Collections.Generic.KeyValuePair<System.String, System.String>)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String)).Remove(System.Collections.Generic.KeyValuePair(Of System.String, System.String))
  name.vb: Remove(KeyValuePair(Of String, String))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.String>>.Remove
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String)).Remove
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  parent: System.Collections.Generic.ICollection`1
  isExternal: true
  name: Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.String>>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.String>>.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String)).GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<KeyValuePair<String, String>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String, System.String>>
  fullname.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String))
  name.vb: IEnumerator(Of KeyValuePair(Of String, String))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  parent: System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
